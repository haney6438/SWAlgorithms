{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "924143e1-32ea-4e10-881c-4585fa387531",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "import string\n",
    "\n",
    "class StudentManager:\n",
    "    def __init__(self):\n",
    "        self.students = []\n",
    "\n",
    "    # 학생 정보 무작위 생성\n",
    "    def generate_random_students(self, count=5):\n",
    "        students = []\n",
    "        for _ in range(count):\n",
    "            name = ''.join(random.choices(string.ascii_uppercase, k=2))  # 이름: 알파벳 대문자 두 글자\n",
    "            age = random.randint(18, 22)  # 나이: 18 ~ 22 사이의 정수\n",
    "            score = random.randint(0, 100)  # 성적: 0 ~ 100 사이의 정수\n",
    "            students.append({\"name\": name, \"age\": age, \"score\": score})\n",
    "        self.students = students\n",
    "\n",
    "    # 파일에 학생 정보 저장\n",
    "    def write_students_to_file(self, filename):\n",
    "        with open(filename, 'w') as file:\n",
    "            for student in self.students:\n",
    "                file.write(f\"{student['name']} {student['age']} {student['score']}\\n\")\n",
    "\n",
    "    # 파일에서 학생 정보 읽기\n",
    "    def read_students_from_file(self, filename):\n",
    "        students = []\n",
    "        with open(filename, 'r') as file:\n",
    "            for line in file:\n",
    "                name, age, score = line.strip().split()\n",
    "                students.append({\"name\": name, \"age\": int(age), \"score\": int(score)})\n",
    "        self.students = students\n",
    "\n",
    "    # 정렬 알고리즘 구현\n",
    "    def selection_sort(self, field, reverse=False):\n",
    "        \"\"\"선택 정렬\"\"\"\n",
    "        students = self.students\n",
    "        n = len(students)\n",
    "        for i in range(n - 1):\n",
    "            selected = i\n",
    "            for j in range(i + 1, n):\n",
    "                if (students[j][field] < students[selected][field]) != reverse:\n",
    "                    selected = j\n",
    "            students[i], students[selected] = students[selected], students[i]\n",
    "        return students\n",
    "\n",
    "    def insertion_sort(self, field, reverse=False):\n",
    "        \"\"\"삽입 정렬\"\"\"\n",
    "        students = self.students\n",
    "        for i in range(1, len(students)):\n",
    "            key = students[i]\n",
    "            j = i - 1\n",
    "            while j >= 0 and (students[j][field] > key[field]) != reverse:\n",
    "                students[j + 1] = students[j]\n",
    "                j -= 1\n",
    "            students[j + 1] = key\n",
    "        return students\n",
    "\n",
    "    def quick_sort(self, field, left, right, reverse=False):\n",
    "        \"\"\"퀵 정렬\"\"\"\n",
    "        if left < right:\n",
    "            q = self.partition(field, left, right, reverse)  # 분할\n",
    "            self.quick_sort(field, left, q - 1, reverse)  # 왼쪽 부분리스트를 퀵 정렬\n",
    "            self.quick_sort(field, q + 1, right, reverse)  # 오른쪽 부분리스트를 퀵 정렬\n",
    "\n",
    "        return self.students\n",
    "        \n",
    "    def partition(self, field, left, right, reverse):\n",
    "        \"\"\"분할 알고리즘\"\"\"\n",
    "        low = left + 1\n",
    "        high = right\n",
    "        pivot = self.students[left][field]  # pivot은 선택한 field에 해당하는 값으로 설정\n",
    "        \n",
    "        while low <= high:\n",
    "            # 피벗보다 큰 요소를 찾음 (reverse에 따라 조건 변경)\n",
    "            while low <= right and ((self.students[low][field] <= pivot) if not reverse else (self.students[low][field] >= pivot)):\n",
    "                low += 1\n",
    "            # 피벗보다 작은 요소를 찾음 (reverse에 따라 조건 변경)\n",
    "            while high >= left and ((self.students[high][field] > pivot) if not reverse else (self.students[high][field] < pivot)):\n",
    "                high -= 1\n",
    "\n",
    "            # 요소를 교환\n",
    "            if low < high:\n",
    "                self.students[low], self.students[high] = self.students[high], self.students[low]\n",
    "\n",
    "        # 피벗 교환\n",
    "        self.students[left], self.students[high] = self.students[high], self.students[left]\n",
    "        return high\n",
    "\n",
    "\n",
    "    def radix_sort(self, field, reverse=False):\n",
    "        \"\"\"기수 정렬\"\"\"\n",
    "        max_num = max(x[field] for x in self.students)\n",
    "        exp = 1\n",
    "        while max_num // exp > 0:\n",
    "            self.students = self.counting_sort(field, exp, reverse)\n",
    "            exp *= 10\n",
    "        return self.students\n",
    "\n",
    "    def counting_sort(self, field, exp, reverse):\n",
    "        \"\"\"계수 정렬 알고리즘\"\"\"\n",
    "        output = [None] * len(self.students)\n",
    "        count = [0] * 30\n",
    "\n",
    "        for student in self.students:\n",
    "            index = (student[field] // exp) % 10\n",
    "            count[index] += 1\n",
    "\n",
    "        # 내림차순으로 처리\n",
    "        if reverse:\n",
    "            for i in range(28, -1, -1):\n",
    "                count[i] += count[i + 1]\n",
    "        else:\n",
    "            for i in range(1, 30):\n",
    "                count[i] += count[i - 1] \n",
    "\n",
    "        for student in reversed(self.students):\n",
    "            index = (student[field] // exp) % 10\n",
    "            output[count[index] - 1] = student\n",
    "            count[index] -= 1\n",
    "\n",
    "        return output\n",
    "\n",
    "\n",
    "def main():\n",
    "    manager = StudentManager()\n",
    "    input_filename = 'C://Users//soldesk//Desktop//hani//students.txt'\n",
    "\n",
    "    print('안녕하세요 20210833 송한이입니다')\n",
    "\n",
    "    while True:\n",
    "        print('''=== 성적 관리 프로그램 ===\n",
    "메뉴:\n",
    "1. 이름을 기준으로 정렬\n",
    "2. 나이를 기준으로 정렬\n",
    "3. 성적을 기준으로 정렬\n",
    "4. 프로그램 종료\n",
    "        ''')\n",
    "\n",
    "        choice = input(\"정렬기준을 선택하세요. (1, 2, 3, 4): \")\n",
    "\n",
    "        if choice == \"1\":\n",
    "            field = \"name\"\n",
    "            field_name = \"이름\"\n",
    "        elif choice == \"2\":\n",
    "            field = \"age\"\n",
    "            field_name = \"나이\"\n",
    "        elif choice == \"3\":\n",
    "            field = \"score\"\n",
    "            field_name = \"성적\"\n",
    "        elif choice == \"4\":\n",
    "            print(\"프로그램을 종료합니다.\")\n",
    "            break\n",
    "        else:\n",
    "            print(\"잘못된 입력입니다. 다시 시도해주세요.\")\n",
    "            continue\n",
    "\n",
    "        # 정렬 순서 선택\n",
    "        while True:\n",
    "            order = input(\"정렬 순서를 선택하세요. (1: 오름차순, 2: 내림차순): \")\n",
    "    \n",
    "            if order == \"1\": # 오름차순\n",
    "                reverse = False \n",
    "                break \n",
    "            elif order == \"2\": # 내림차순\n",
    "                reverse = True\n",
    "                break \n",
    "            else:\n",
    "                print(\"잘못된 입력입니다. 다시 시도해주세요.\") \n",
    "\n",
    "        # 학생 정보 저장 방식 선택\n",
    "        while True:\n",
    "            save = input(\"학생 정보를 파일로 저장하시겠습니까? (Y: 파일로 저장, N: 리스트로만 저장): \")\n",
    "            if save == 'Y' or save =='y':\n",
    "                manager.generate_random_students(30)\n",
    "                manager.write_students_to_file(input_filename)\n",
    "                print(f\"학생 정보가 '{input_filename}' 에 저장되었습니다.\")\n",
    "                break\n",
    "            elif save =='N' or save == 'n':\n",
    "                manager.generate_random_students(30)\n",
    "                print(\"학생 정보가 리스트로만 저장되었습니다.\")\n",
    "                break\n",
    "            else:\n",
    "                print(\"잘못된 입력입니다. 다시 시도해주세요.\") \n",
    "              \n",
    "        # 파일에서 학생 정보 읽기\n",
    "        manager.read_students_from_file(input_filename)\n",
    "        print(f\"-----------------------------------------\\n* 정렬 기준: {field_name}, {'내림차순' if reverse else '오름차순'}\")  \n",
    "        \n",
    "        # 생성된 학생 리스트 출력\n",
    "        print(\"* 생성된 학생 정보:\")\n",
    "        for student in manager.students:\n",
    "            print(f\"이름: {student['name']}, 나이: {student['age']}, 성적: {student['score']}\")\n",
    "        print(\"-----------------------------------------\")\n",
    "\n",
    "        # 각 정렬 방식 출력\n",
    "        print(\"\\n정렬 결과 (선택 정렬):\")\n",
    "        selection_sorted = manager.selection_sort(field, reverse)\n",
    "        for student in selection_sorted:\n",
    "            print(f\"이름: {student['name']}, 나이: {student['age']}, 성적: {student['score']}\")\n",
    "\n",
    "        print(\"\\n정렬 결과 (삽입 정렬):\")\n",
    "        insertion_sorted = manager.insertion_sort(field, reverse)\n",
    "        for student in insertion_sorted:\n",
    "            print(f\"이름: {student['name']}, 나이: {student['age']}, 성적: {student['score']}\")\n",
    "\n",
    "        print(\"\\n정렬 결과 (퀵 정렬):\")\n",
    "        quick_sorted = manager.quick_sort(field, 0, len(manager.students) - 1, reverse)\n",
    "        for student in quick_sorted:\n",
    "            print(f\"이름: {student['name']}, 나이: {student['age']}, 성적: {student['score']}\")\n",
    "\n",
    "        # 기수 정렬 - 성적 기준으로 정렬할 때만 사용 가능\n",
    "        if field == \"score\":\n",
    "            print(\"\\n정렬 결과 (기수 정렬):\")\n",
    "            radix_sorted = manager.radix_sort(field, reverse)\n",
    "            for student in radix_sorted:\n",
    "                print(f\"이름: {student['name']}, 나이: {student['age']}, 성적: {student['score']}\")\n",
    "\n",
    "\n",
    "        print(\"==========================================\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
